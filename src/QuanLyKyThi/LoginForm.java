package QuanLyKyThi;

// Th√™m import cho callback interface
import java.util.function.Consumer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 * Form ƒëƒÉng nh·∫≠p h·ªá th·ªëng
 */
public class LoginForm extends JFrame {
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    private JButton btnLogin, btnExit;
    private JLabel lblStatus;
    private AuthenticationService authService;
    
    // Callback ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p
    private Consumer<AuthenticationService> loginSuccessCallback;
    private Runnable loginCancelCallback;
    
    public LoginForm() {
        this.authService = new AuthenticationService();
        initComponents();
    }
    
    // Constructor v·ªõi callback
    public LoginForm(Consumer<AuthenticationService> onLoginSuccess, Runnable onLoginCancel) {
        this();
        this.loginSuccessCallback = onLoginSuccess;
        this.loginCancelCallback = onLoginCancel;
    }
    
    /**
     * Constructor v·ªõi k√≠ch th∆∞·ªõc t√πy ch·ªânh
     */
    public LoginForm(int width, int height) {
        this.authService = new AuthenticationService();
        initComponentsWithSize(width, height);
    }
    
    /**
     * Constructor v·ªõi callback v√† k√≠ch th∆∞·ªõc t√πy ch·ªânh
     */
    public LoginForm(int width, int height, Consumer<AuthenticationService> onLoginSuccess, Runnable onLoginCancel) {
        this.authService = new AuthenticationService();
        this.loginSuccessCallback = onLoginSuccess;
        this.loginCancelCallback = onLoginCancel;
        initComponentsWithSize(width, height);
    }
    
    /**
     * C√°c preset k√≠ch th∆∞·ªõc ph·ªï bi·∫øn
     */
    public static final int[] SIZE_SMALL = {1024, 768};      // 4:3 - Nh·ªè
    public static final int[] SIZE_MEDIUM = {1280, 720};     // 16:9 - Trung b√¨nh
    public static final int[] SIZE_LARGE = {1366, 768};      // Laptop ph·ªï bi·∫øn
    public static final int[] SIZE_XLARGE = {1600, 900};     // Widescreen
    public static final int[] SIZE_FULLHD = {1920, 1080};    // Full HD
    
    /**
     * T·∫°o LoginForm v·ªõi preset k√≠ch th∆∞·ªõc
     */
    public static LoginForm createWithSize(int[] sizePreset) {
        return new LoginForm(sizePreset[0], sizePreset[1]);
    }
    
    /**
     * T·∫°o LoginForm v·ªõi preset k√≠ch th∆∞·ªõc v√† callback
     */
    public static LoginForm createWithSize(int[] sizePreset, Consumer<AuthenticationService> onLoginSuccess, Runnable onLoginCancel) {
        return new LoginForm(sizePreset[0], sizePreset[1], onLoginSuccess, onLoginCancel);
    }
    
    /**
     * Kh·ªüi t·∫°o components v·ªõi k√≠ch th∆∞·ªõc t√πy ch·ªânh
     */
    private void initComponentsWithSize(int width, int height) {
        setTitle("ƒêƒÉng Nh·∫≠p - H·ªá Th·ªëng Qu·∫£n L√Ω K·ª≥ Thi");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(width, height);
        setLocationRelativeTo(null);
        setResizable(true); // Cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc b·∫±ng c√°ch k√©o th·∫£ chu·ªôt
        
        // Set k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu ƒë·ªÉ tr√°nh giao di·ªán b·ªã v·ª°
        setMinimumSize(new Dimension(800, 500));
        
        // Th√™m ComponentListener ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi k√≠ch th∆∞·ªõc
        addComponentListener(new java.awt.event.ComponentAdapter() {
            @Override
            public void componentResized(java.awt.event.ComponentEvent evt) {
                handleWindowResize();
            }
        });
        
        // Th√™m th√¥ng b√°o v·ªÅ t√≠nh nƒÉng resize
        System.out.println("LoginForm - C√≥ th·ªÉ k√©o th·∫£ ƒë·ªÉ thay ƒë·ªïi k√≠ch th∆∞·ªõc. K√≠ch th∆∞·ªõc hi·ªán t·∫°i: " + width + "√ó" + height);
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc c√°c panel d·ª±a tr√™n t·ª∑ l·ªá
        int brandWidth = (int)(width * 0.65); // 65% cho brand panel
        int loginWidth = (int)(width * 0.35); // 35% cho login panel
        
        // Panel ch√≠nh s·ª≠ d·ª•ng BorderLayout
        JPanel mainPanel = new JPanel(new BorderLayout());
        
        // Panel b√™n tr√°i - Logo/Brand v·ªõi gradient background
        JPanel brandPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                int w = getWidth(), h = getHeight();
                Color color1 = new Color(0, 102, 204);
                Color color2 = new Color(102, 178, 255);
                GradientPaint gp = new GradientPaint(0, 0, color1, 0, h, color2);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, w, h);
            }
        };
        brandPanel.setLayout(new GridBagLayout());
        brandPanel.setPreferredSize(new Dimension(brandWidth, height));
        
        // Th√™m n·ªôi dung brand panel
        setupBrandPanel(brandPanel);
        
        // Panel form ƒëƒÉng nh·∫≠p b√™n ph·∫£i
        JPanel loginPanel = new JPanel(new GridBagLayout());
        loginPanel.setBackground(Color.WHITE);
        loginPanel.setPreferredSize(new Dimension(loginWidth, height));
        
        // T√≠nh to√°n padding d·ª±a tr√™n k√≠ch th∆∞·ªõc
        int padding = Math.max(20, width / 50);
        loginPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createRaisedBevelBorder(),
            BorderFactory.createEmptyBorder(padding, padding, padding, padding)
        ));
        
        // Setup login form v·ªõi k√≠ch th∆∞·ªõc responsive
        setupLoginForm(loginPanel, width, height);
        
        // Th√™m c√°c panel v√†o main panel
        mainPanel.add(brandPanel, BorderLayout.WEST);
        mainPanel.add(loginPanel, BorderLayout.CENTER);
        
        add(mainPanel);
        
        // Event handlers
        setupEventHandlers();
        
        // Focus v√†o username field
        SwingUtilities.invokeLater(() -> txtUsername.requestFocus());
    }
    
    /**
     * Setup login form v·ªõi k√≠ch th∆∞·ªõc responsive
     */
    private void setupLoginForm(JPanel loginPanel, int width, int height) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        
        // T√≠nh to√°n font size d·ª±a tr√™n k√≠ch th∆∞·ªõc
        int titleFontSize = Math.max(16, width / 80);
        int labelFontSize = Math.max(14, width / 90);
        int fieldFontSize = Math.max(14, width / 90);
        int buttonFontSize = Math.max(12, width / 100);
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc field
        int fieldWidth = Math.min(350, width / 4);
        int fieldHeight = Math.max(35, height / 20);
        
        // Logo/Title cho form ƒëƒÉng nh·∫≠p
        JLabel titleLabel = new JLabel("ƒêƒÇNG NH·∫¨P");
        titleLabel.setFont(new Font("Arial", Font.BOLD, titleFontSize));
        titleLabel.setForeground(new Color(0, 102, 204));
        gbc.gridx = 0; gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        loginPanel.add(titleLabel, gbc);
        
        // Icon
        try {
            JLabel iconLabel = new JLabel("üîê");
            iconLabel.setFont(new Font("Arial", Font.PLAIN, titleFontSize + 16));
            gbc.gridy = 1;
            loginPanel.add(iconLabel, gbc);
        } catch (Exception e) {
            // N·∫øu kh√¥ng c√≥ icon th√¨ b·ªè qua
        }
        
        // Reset gridwidth
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.WEST;
        
        // Username Label
        gbc.gridx = 0; gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        JLabel lblUsername = new JLabel("T√™n ƒëƒÉng nh·∫≠p:");
        lblUsername.setFont(new Font("Arial", Font.BOLD, labelFontSize));
        loginPanel.add(lblUsername, gbc);
        
        // Username Field
        gbc.gridx = 0; gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        txtUsername = new JTextField(20);
        txtUsername.setFont(new Font("Arial", Font.PLAIN, fieldFontSize));
        txtUsername.setPreferredSize(new Dimension(fieldWidth, fieldHeight));
        txtUsername.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLoweredBevelBorder(),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        loginPanel.add(txtUsername, gbc);
        
        // Password Label
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(20, 10, 5, 10);
        JLabel lblPassword = new JLabel("M·∫≠t kh·∫©u:");
        lblPassword.setFont(new Font("Arial", Font.BOLD, labelFontSize));
        loginPanel.add(lblPassword, gbc);
        
        // Password Field
        gbc.gridx = 0; gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 10, 10, 10);
        txtPassword = new JPasswordField(20);
        txtPassword.setFont(new Font("Arial", Font.PLAIN, fieldFontSize));
        txtPassword.setPreferredSize(new Dimension(fieldWidth, fieldHeight));
        txtPassword.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLoweredBevelBorder(),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        loginPanel.add(txtPassword, gbc);
        
        // Status label
        gbc.gridx = 0; gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(10, 10, 10, 10);
        lblStatus = new JLabel(" ");
        lblStatus.setFont(new Font("Arial", Font.ITALIC, labelFontSize - 2));
        lblStatus.setForeground(Color.RED);
        lblStatus.setPreferredSize(new Dimension(fieldWidth, 25));
        loginPanel.add(lblStatus, gbc);
        
        // Buttons
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(15, 10, 10, 10);
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 5));
        buttonPanel.setOpaque(false);
        
        int buttonWidth = Math.max(100, fieldWidth / 3);
        int buttonHeight = Math.max(35, fieldHeight);
        
        btnLogin = new JButton("ƒêƒÇNG NH·∫¨P");
        btnLogin.setBackground(new Color(0, 153, 0));
        btnLogin.setForeground(Color.BLACK);
        btnLogin.setFont(new Font("Arial", Font.BOLD, buttonFontSize));
        btnLogin.setFocusPainted(false);
        btnLogin.setPreferredSize(new Dimension(buttonWidth, buttonHeight));
        btnLogin.setBorder(BorderFactory.createRaisedBevelBorder());
        
        btnExit = new JButton("THO√ÅT");
        btnExit.setBackground(new Color(204, 0, 0));
        btnExit.setForeground(Color.BLACK);
        btnExit.setFont(new Font("Arial", Font.BOLD, buttonFontSize));
        btnExit.setFocusPainted(false);
        btnExit.setPreferredSize(new Dimension(buttonWidth, buttonHeight));
        btnExit.setBorder(BorderFactory.createRaisedBevelBorder());
        
        buttonPanel.add(btnLogin);
        buttonPanel.add(btnExit);
        loginPanel.add(buttonPanel, gbc);
    }
    
    private void initComponents() {
        // S·ª≠ d·ª•ng k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh 1280x720
        initComponentsWithSize(1280, 720);
    }
    
    /**
     * Thi·∫øt l·∫≠p n·ªôi dung cho brand panel b√™n tr√°i
     */
    private void setupBrandPanel(JPanel brandPanel) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(20, 20, 20, 20);
        gbc.anchor = GridBagConstraints.CENTER;
        
        // Logo ch√≠nh - c√≥ th·ªÉ thay b·∫±ng h√¨nh ·∫£nh th·ª±c
        JLabel logoLabel = new JLabel("üéì");
        logoLabel.setFont(new Font("Arial", Font.PLAIN, 80));
        logoLabel.setForeground(Color.WHITE);
        gbc.gridx = 0; gbc.gridy = 0;
        brandPanel.add(logoLabel, gbc);
        
        // T√™n h·ªá th·ªëng
        JLabel systemNameLabel = new JLabel("H·ªÜ TH·ªêNG QU·∫¢N L√ù K·ª≤ THI");
        systemNameLabel.setFont(new Font("Arial", Font.BOLD, 24));
        systemNameLabel.setForeground(Color.WHITE);
        systemNameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        gbc.gridy = 1;
        gbc.insets = new Insets(10, 20, 10, 20);
        brandPanel.add(systemNameLabel, gbc);
        
        // Phi√™n b·∫£n
        JLabel versionLabel = new JLabel("Phi√™n b·∫£n 2.0");
        versionLabel.setFont(new Font("Arial", Font.ITALIC, 16));
        versionLabel.setForeground(new Color(220, 220, 220));
        versionLabel.setHorizontalAlignment(SwingConstants.CENTER);
        gbc.gridy = 2;
        gbc.insets = new Insets(5, 20, 20, 20);
        brandPanel.add(versionLabel, gbc);
        
        // M√¥ t·∫£ t√≠nh nƒÉng
        JLabel featuresLabel = new JLabel("<html><div style='text-align: center; line-height: 1.6;'>" +
            "‚úì Qu·∫£n l√Ω K·ª≥ thi v√† Th√≠ sinh<br/>" +
            "‚úì Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng<br/>" +
            "‚úì Nh·∫≠p ƒëi·ªÉm v√† B√°o c√°o<br/>" +
            "‚úì Th·ªëng k√™ v√† Ph√¢n t√≠ch<br/>" +
            "‚úì B·∫£o m·∫≠t v√† ƒêƒÉng nh·∫≠p</div></html>");
        featuresLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        featuresLabel.setForeground(new Color(240, 240, 240));
        featuresLabel.setHorizontalAlignment(SwingConstants.CENTER);
        gbc.gridy = 3;
        gbc.insets = new Insets(30, 20, 20, 20);
        brandPanel.add(featuresLabel, gbc);
        
        // Copyright/Footer
        JLabel footerLabel = new JLabel("<html><div style='text-align: center; line-height: 1.4;'>" +
            "¬© 2025 H·ªá Th·ªëng Qu·∫£n L√Ω K·ª≥ Thi<br/>" +
            "Ph√°t tri·ªÉn b·ªüi Java Swing</div></html>");
        footerLabel.setFont(new Font("Arial", Font.PLAIN, 11));
        footerLabel.setForeground(new Color(200, 200, 200));
        footerLabel.setHorizontalAlignment(SwingConstants.CENTER);
        gbc.gridy = 4;
        gbc.insets = new Insets(40, 20, 20, 20);
        brandPanel.add(footerLabel, gbc);
    }
    
    private void setupEventHandlers() {
        btnLogin.addActionListener(e -> performLogin());
        btnExit.addActionListener(e -> System.exit(0));
        
        // Enter ƒë·ªÉ ƒëƒÉng nh·∫≠p
        txtUsername.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    performLogin();
                }
            }
        });
        txtPassword.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    performLogin();
                }
            }
        });
        
        // Tab ƒë·ªÉ chuy·ªÉn focus
        txtUsername.addActionListener(e -> txtPassword.requestFocus());
        
        // Th√™m hi·ªáu ·ª©ng hover cho buttons
        addButtonHoverEffects();
    }
    
    private void addButtonHoverEffects() {
        // Hi·ªáu ·ª©ng hover cho button ƒêƒÉng nh·∫≠p
        btnLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 180, 0)); // Xanh s√°ng h∆°n
                btnLogin.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 153, 0)); // Xanh ban ƒë·∫ßu
                btnLogin.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 120, 0)); // Xanh ƒë·∫≠m khi nh·∫•n
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 180, 0)); // Quay l·∫°i m√†u hover
            }
        });
        
        // Hi·ªáu ·ª©ng hover cho button Tho√°t
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(230, 0, 0)); // ƒê·ªè s√°ng h∆°n
                btnExit.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(204, 0, 0)); // ƒê·ªè ban ƒë·∫ßu
                btnExit.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(180, 0, 0)); // ƒê·ªè ƒë·∫≠m khi nh·∫•n
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(230, 0, 0)); // Quay l·∫°i m√†u hover
            }
        });
    }
    
    private void performLogin() {
        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword());
        
        if (username.isEmpty()) {
            showStatus("Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!", Color.RED);
            txtUsername.requestFocus();
            return;
        }
        
        if (password.isEmpty()) {
            showStatus("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!", Color.RED);
            txtPassword.requestFocus();
            return;
        }
        
        // Hi·ªÉn th·ªã loading
        btnLogin.setEnabled(false);
        btnLogin.setText("ƒêang ƒëƒÉng nh·∫≠p...");
        showStatus("ƒêang x√°c th·ª±c...", Color.BLUE);
        
        // Simulate loading delay
        Timer timer = new Timer(1000, e -> {
            if (authService.login(username, password)) {
                showStatus("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", Color.GREEN);
                
                // L·∫•y th√¥ng tin user hi·ªán t·∫°i
                User currentUser = authService.getCurrentUser();
                System.out.println("LoginForm - ƒêƒÉng nh·∫≠p th√†nh c√¥ng: " + currentUser.getHoTen() + " (" + currentUser.getRole() + ")");
                
                // G·ªçi callback n·∫øu c√≥
                if (loginSuccessCallback != null) {
                    System.out.println("LoginForm - S·ª≠ d·ª•ng callback ƒë·ªÉ m·ªü MainGUIWithAuth");
                    
                    // ƒê√≥ng LoginForm tr∆∞·ªõc khi m·ªü MainGUIWithAuth
                    SwingUtilities.invokeLater(() -> {
                        try {
                            loginSuccessCallback.accept(authService);
                            dispose(); // ƒê√≥ng LoginForm sau khi callback th√†nh c√¥ng
                        } catch (Exception ex) {
                            System.err.println("L·ªói khi th·ª±c hi·ªán callback: " + ex.getMessage());
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(LoginForm.this,
                                "L·ªói khi m·ªü giao di·ªán ch√≠nh: " + ex.getMessage(),
                                "L·ªói", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                } else {
                    System.out.println("LoginForm - S·ª≠ d·ª•ng logic m·∫∑c ƒë·ªãnh ƒë·ªÉ chuy·ªÉn h∆∞·ªõng");
                    // Chuy·ªÉn h∆∞·ªõng theo role
                    SwingUtilities.invokeLater(() -> {
                        try {
                            redirectBasedOnRole(currentUser);
                            dispose();
                        } catch (Exception ex) {
                            System.err.println("L·ªói khi chuy·ªÉn h∆∞·ªõng: " + ex.getMessage());
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(LoginForm.this,
                                "L·ªói khi m·ªü giao di·ªán: " + ex.getMessage(),
                                "L·ªói", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                }
            } else {
                showStatus("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!", Color.RED);
                txtPassword.setText("");
                txtUsername.requestFocus();
            }
            
            btnLogin.setEnabled(true);
            btnLogin.setText("ƒêƒÉng Nh·∫≠p");
        });
        timer.setRepeats(false);
        timer.start();
    }
    
    private void showStatus(String message, Color color) {
        lblStatus.setText(message);
        lblStatus.setForeground(color);
    }
    
    /**
     * Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn giao di·ªán ph√π h·ª£p v·ªõi role
     */
    private void redirectBasedOnRole(User user) {
        if (user == null) {
            JOptionPane.showMessageDialog(this, "L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin ng∆∞·ªùi d√πng!", 
                                        "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // N·∫øu c√≥ callback, s·ª≠ d·ª•ng callback thay v√¨ t·ª± m·ªü giao di·ªán
        if (loginSuccessCallback != null) {
            loginSuccessCallback.accept(authService);
            return;
        }
        
        // Logic m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ callback
        String role = user.getRole().toLowerCase();
        String welcomeMessage = "Ch√†o m·ª´ng " + user.getHoTen() + " (" + user.getRole() + ")";
        
        switch (role) {
            case "admin":
                // Admin: C√≥ quy·ªÅn cao nh·∫•t, v√†o MainGUIWithAuth
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn Qu·∫£n tr·ªã vi√™n", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                SwingUtilities.invokeLater(() -> {
                    try {
                        MainGUIWithAuth mainGUI = new MainGUIWithAuth(authService);
                        mainGUI.setVisible(true);
                        System.out.println("LoginForm - MainGUIWithAuth ƒë√£ ƒë∆∞·ª£c m·ªü cho Admin");
                    } catch (Exception e) {
                        System.err.println("L·ªói khi m·ªü MainGUIWithAuth cho Admin: " + e.getMessage());
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "L·ªói khi m·ªü giao di·ªán: " + e.getMessage());
                    }
                });
                break;
                
            case "giaovu":
                // Gi√°o v·ª•: Qu·∫£n l√Ω k·ª≥ thi, nh·∫≠p ƒëi·ªÉm, th·ªëng k√™
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn Gi√°o v·ª•", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                SwingUtilities.invokeLater(() -> {
                    try {
                        MainGUIWithAuth mainGUI = new MainGUIWithAuth(authService);
                        mainGUI.setVisible(true);
                        System.out.println("LoginForm - MainGUIWithAuth ƒë√£ ƒë∆∞·ª£c m·ªü cho Gi√°o v·ª•");
                    } catch (Exception e) {
                        System.err.println("L·ªói khi m·ªü MainGUIWithAuth cho Gi√°o v·ª•: " + e.getMessage());
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "L·ªói khi m·ªü giao di·ªán: " + e.getMessage());
                    }
                });
                break;
                
            case "user":
                // User th∆∞·ªùng: Ch·ªâ xem k·∫øt qu·∫£, ƒëƒÉng k√Ω thi
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn h·∫°n ch·∫ø", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                openUserLimitedGUI(user);
                break;
                
            case "thisinh":
                // Th√≠ sinh: Ch·ªâ xem k·∫øt qu·∫£ c·ªßa m√¨nh
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p d√†nh cho Th√≠ sinh", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                openThiSinhGUI(user);
                break;
                
            default:
                // Role kh√¥ng x√°c ƒë·ªãnh: V√†o demo mode ho·∫∑c basic GUI
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn c∆° b·∫£n", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                openDemoMode();
                break;
        }
    }
    
    /**
     * M·ªü giao di·ªán h·∫°n ch·∫ø cho user th∆∞·ªùng
     */
    private void openUserLimitedGUI(User user) {
        // C√≥ th·ªÉ t·∫°o UserLimitedGUI ho·∫∑c d√πng MainGUI v·ªõi m·ªôt s·ªë t√≠nh nƒÉng b·ªã ·∫©n
        try {
            // T·∫°m th·ªùi d√πng MainGUI, sau n√†y c√≥ th·ªÉ t·∫°o GUI ri√™ng
            new MainGUI();  // Kh√¥ng c√≥ quy·ªÅn admin
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói kh·ªüi t·∫°o giao di·ªán: " + e.getMessage(), 
                                        "L·ªói", JOptionPane.ERROR_MESSAGE);
            openDemoMode();
        }
    }
    
    /**
     * M·ªü giao di·ªán d√†nh cho th√≠ sinh
     */
    private void openThiSinhGUI(User user) {
        try {
            // C√≥ th·ªÉ t·∫°o ThiSinhGUI ri√™ng, hi·ªán t·∫°i d√πng MainGUI
            new MainGUI();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói kh·ªüi t·∫°o giao di·ªán: " + e.getMessage(), 
                                        "L·ªói", JOptionPane.ERROR_MESSAGE);
            openDemoMode();
        }
    }
    
    /**
     * M·ªü Demo mode khi c√≥ l·ªói ho·∫∑c role kh√¥ng x√°c ƒë·ªãnh
     */
    private void openDemoMode() {
        try {
            // M·ªü MainGUI v·ªõi quy·ªÅn demo
            SwingUtilities.invokeLater(() -> {
                try {
                    // T·∫°o MainGUI v·ªõi quy·ªÅn basic
                    new MainGUI();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ m·ªü ch·∫ø ƒë·ªô demo: " + ex.getMessage());
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ kh·ªüi t·∫°o b·∫•t k·ª≥ giao di·ªán n√†o!", 
                                        "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    /**
     * Entry point ri√™ng cho LoginForm - ƒêi·ªÉm kh·ªüi ch·∫°y c√≥ authentication
     * 
     * Workflow sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng:
     * - Admin: ‚Üí MainGUIWithAuth (quy·ªÅn ƒë·∫ßy ƒë·ªß)
     * - Gi√°o v·ª•: ‚Üí MainGUIWithAuth (qu·∫£n l√Ω k·ª≥ thi, nh·∫≠p ƒëi·ªÉm)
     * - User: ‚Üí MainGUI (quy·ªÅn h·∫°n ch·∫ø)
     * - Th√≠ sinh: ‚Üí MainGUI (ch·ªâ xem k·∫øt qu·∫£)
     * - Kh√°c: ‚Üí Demo mode (fallback)
     * 
     * Entry point ch√≠nh kh√¥ng c√≥ auth: Demo.main()
     */
    public static void main(String[] args) {
        // Set Look and Feel ƒë·ªÉ giao di·ªán ƒë·∫πp h∆°n
        try {
            // S·ª≠ d·ª•ng Look and Feel c·ªßa h·ªá ƒëi·ªÅu h√†nh (Windows/Mac/Linux)
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | 
                 IllegalAccessException | UnsupportedLookAndFeelException e) {
            // N·∫øu l·ªói th√¨ d√πng Look and Feel m·∫∑c ƒë·ªãnh (Metal)
            System.err.println("Kh√¥ng th·ªÉ thi·∫øt l·∫≠p System Look and Feel: " + e.getMessage());
            try {
                UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        
        // Kh·ªüi ch·∫°y ·ª©ng d·ª•ng tr√™n Event Dispatch Thread
        SwingUtilities.invokeLater(() -> {
            new LoginForm().setVisible(true);
        });
    }
    
    /**
     * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï b·∫±ng c√°ch k√©o th·∫£ chu·ªôt
     */
    private void handleWindowResize() {
        SwingUtilities.invokeLater(() -> {
            try {
                Dimension currentSize = getSize();
                int newWidth = currentSize.width;
                int newHeight = currentSize.height;
                
                // Debug th√¥ng tin
                System.out.println("LoginForm - K√≠ch th∆∞·ªõc m·ªõi: " + newWidth + "x" + newHeight);
                
                // T√≠nh to√°n l·∫°i k√≠ch th∆∞·ªõc c√°c panel theo t·ª∑ l·ªá
                updatePanelSizes(newWidth, newHeight);
                
                // Refresh giao di·ªán
                revalidate();
                repaint();
                
            } catch (Exception e) {
                System.err.println("L·ªói khi thay ƒë·ªïi k√≠ch th∆∞·ªõc: " + e.getMessage());
            }
        });
    }
    
    /**
     * C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc c√°c panel khi c·ª≠a s·ªï thay ƒë·ªïi k√≠ch th∆∞·ªõc
     */
    private void updatePanelSizes(int newWidth, int newHeight) {
        // T√¨m c√°c panel trong giao di·ªán
        Container contentPane = getContentPane();
        if (contentPane instanceof JPanel) {
            JPanel mainPanel = (JPanel) contentPane;
            Component[] components = mainPanel.getComponents();
            
            for (Component comp : components) {
                if (comp instanceof JPanel) {
                    JPanel panel = (JPanel) comp;
                    
                    // X√°c ƒë·ªãnh panel brand (b√™n tr√°i) v√† login (b√™n ph·∫£i)
                    if (panel.getBackground() == null) { // Brand panel c√≥ background gradient (null)
                        // Brand panel - 65% chi·ªÅu r·ªông
                        int brandWidth = (int)(newWidth * 0.65);
                        panel.setPreferredSize(new Dimension(brandWidth, newHeight));
                        
                    } else if (panel.getBackground() == Color.WHITE) { // Login panel c√≥ background tr·∫Øng
                        // Login panel - 35% chi·ªÅu r·ªông
                        int loginWidth = (int)(newWidth * 0.35);
                        panel.setPreferredSize(new Dimension(loginWidth, newHeight));
                        
                        // C·∫≠p nh·∫≠t font size v√† k√≠ch th∆∞·ªõc field cho login panel
                        updateLoginPanelComponents(panel, newWidth, newHeight);
                    }
                }
            }
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t font size v√† k√≠ch th∆∞·ªõc c√°c component trong login panel
     */
    private void updateLoginPanelComponents(JPanel loginPanel, int windowWidth, int windowHeight) {
        // T√≠nh to√°n font size m·ªõi d·ª±a tr√™n k√≠ch th∆∞·ªõc c·ª≠a s·ªï
        int titleFontSize = Math.max(16, windowWidth / 80);
        int labelFontSize = Math.max(14, windowWidth / 90);
        int fieldFontSize = Math.max(14, windowWidth / 90);
        int buttonFontSize = Math.max(12, windowWidth / 100);
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc field m·ªõi
        int fieldWidth = Math.min(350, windowWidth / 4);
        int fieldHeight = Math.max(35, windowHeight / 20);
        int buttonWidth = Math.max(100, fieldWidth / 3);
        int buttonHeight = Math.max(35, fieldHeight);
        
        // C·∫≠p nh·∫≠t c√°c component
        updateComponentsRecursively(loginPanel, titleFontSize, labelFontSize, fieldFontSize, 
                                   buttonFontSize, fieldWidth, fieldHeight, buttonWidth, buttonHeight);
    }
    
    /**
     * C·∫≠p nh·∫≠t font v√† k√≠ch th∆∞·ªõc c√°c component m·ªôt c√°ch ƒë·ªá quy
     */
    private void updateComponentsRecursively(Container container, int titleFontSize, int labelFontSize, 
                                           int fieldFontSize, int buttonFontSize, int fieldWidth, 
                                           int fieldHeight, int buttonWidth, int buttonHeight) {
        for (Component comp : container.getComponents()) {
            if (comp instanceof JLabel) {
                JLabel label = (JLabel) comp;
                String text = label.getText();
                
                if ("ƒêƒÇNG NH·∫¨P".equals(text) || "üîê".equals(text)) {
                    // Title v√† icon
                    int fontSize = "üîê".equals(text) ? titleFontSize + 16 : titleFontSize;
                    label.setFont(new Font("Arial", label.getFont().getStyle(), fontSize));
                } else if (text.contains("ƒëƒÉng nh·∫≠p") || text.contains("kh·∫©u")) {
                    // Label cho field
                    label.setFont(new Font("Arial", Font.BOLD, labelFontSize));
                } else {
                    // Status label v√† c√°c label kh√°c
                    label.setFont(new Font("Arial", label.getFont().getStyle(), labelFontSize - 2));
                    if (label == lblStatus) {
                        label.setPreferredSize(new Dimension(fieldWidth, 25));
                    }
                }
                
            } else if (comp instanceof JTextField || comp instanceof JPasswordField) {
                // Text field v√† password field
                comp.setFont(new Font("Arial", Font.PLAIN, fieldFontSize));
                comp.setPreferredSize(new Dimension(fieldWidth, fieldHeight));
                
            } else if (comp instanceof JButton) {
                // Buttons
                JButton button = (JButton) comp;
                button.setFont(new Font("Arial", Font.BOLD, buttonFontSize));
                button.setPreferredSize(new Dimension(buttonWidth, buttonHeight));
                
            } else if (comp instanceof Container) {
                // ƒê·ªá quy cho c√°c container con
                updateComponentsRecursively((Container) comp, titleFontSize, labelFontSize, 
                                          fieldFontSize, buttonFontSize, fieldWidth, fieldHeight, 
                                          buttonWidth, buttonHeight);
            }
        }
    }
}
